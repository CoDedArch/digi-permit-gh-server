"""Make expected dates timezone-aware

Revision ID: 5a59f26cf09d
Revises: 
Create Date: 2025-07-03 23:33:09.907866

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '5a59f26cf09d'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('permit_types')
    op.drop_table('zoning_use_document_requirements')
    op.drop_table('committee_members')
    op.drop_table('previous_land_uses')
    op.drop_table('unverified_users')
    op.drop_table('application_site_conditions')
    op.drop_table('fee_structures')
    op.drop_table('committee_reviews')
    op.drop_table('application_reviews')
    op.drop_table('spatial_ref_sys')
    op.drop_table('application_documents')
    op.drop_table('committees')
    op.drop_table('notifications')
    op.drop_table('zoning_prohibited_uses')
    op.drop_table('users')
    op.drop_table('document_types')
    op.drop_table('inspections')
    op.drop_table('payments')
    op.drop_index('idx_zoning_districts_spatial_data', table_name='zoning_districts', postgresql_using='gist')
    op.drop_table('zoning_districts')
    op.drop_table('departments')
    op.drop_table('professionals')
    op.drop_table('applicant_types')
    op.drop_table('user_profiles')
    op.drop_table('site_conditions')
    op.drop_table('drainage_types')
    op.drop_index('idx_permit_applications_parcel_geometry', table_name='permit_applications', postgresql_using='gist')
    op.drop_index('idx_permit_applications_project_location', table_name='permit_applications', postgresql_using='gist')
    op.drop_index('idx_permit_applications_spatial_data', table_name='permit_applications', postgresql_using='gist')
    op.drop_index('ix_permit_applications_applicant', table_name='permit_applications')
    op.drop_index('ix_permit_applications_application_number', table_name='permit_applications')
    op.drop_index('ix_permit_applications_created', table_name='permit_applications')
    op.drop_index('ix_permit_applications_project_location', table_name='permit_applications')
    op.drop_index('ix_permit_applications_status', table_name='permit_applications')
    op.drop_table('permit_applications')
    op.drop_table('mmdas')
    op.drop_table('user_documents')
    op.drop_table('permit_document_requirements')
    op.drop_table('application_status_history')
    op.drop_table('zoning_permitted_uses')
    op.drop_table('department_staff')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('department_staff',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('department_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('position', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('is_head', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['department_id'], ['departments.id'], name='department_staff_department_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='department_staff_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='department_staff_pkey')
    )
    op.create_table('zoning_permitted_uses',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('zoning_permitted_uses_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('zoning_district_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('use', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('requires_epa_approval', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('requires_heritage_review', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('requires_traffic_study', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['zoning_district_id'], ['zoning_districts.id'], name='zoning_permitted_uses_zoning_district_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='zoning_permitted_uses_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('application_status_history',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('application_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('from_status', postgresql.ENUM('DRAFT', 'SUBMITTED', 'UNDER_REVIEW', 'ADDITIONAL_INFO_REQUESTED', 'APPROVED', 'REJECTED', 'INSPECTION_PENDING', 'INSPECTION_COMPLETED', 'FOR_APPROVAL_OR_REJECTION', 'ISSUED', 'COMPLETED', 'CANCELLED', name='applicationstatus'), autoincrement=False, nullable=True),
    sa.Column('to_status', postgresql.ENUM('DRAFT', 'SUBMITTED', 'UNDER_REVIEW', 'ADDITIONAL_INFO_REQUESTED', 'APPROVED', 'REJECTED', 'INSPECTION_PENDING', 'INSPECTION_COMPLETED', 'FOR_APPROVAL_OR_REJECTION', 'ISSUED', 'COMPLETED', 'CANCELLED', name='applicationstatus'), autoincrement=False, nullable=True),
    sa.Column('changed_by_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('changed_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['application_id'], ['permit_applications.id'], name='application_status_history_application_id_fkey'),
    sa.ForeignKeyConstraint(['changed_by_id'], ['users.id'], name='application_status_history_changed_by_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='application_status_history_pkey')
    )
    op.create_table('permit_document_requirements',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('permit_type_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('document_type_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_mandatory', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('conditional_logic', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('notes', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('phase', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['document_type_id'], ['document_types.id'], name='permit_document_requirements_document_type_id_fkey'),
    sa.ForeignKeyConstraint(['permit_type_id'], ['permit_types.id'], name='permit_document_requirements_permit_type_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='permit_document_requirements_pkey')
    )
    op.create_table('user_documents',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('document_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('file_url', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_documents_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='user_documents_pkey')
    )
    op.create_table('mmdas',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('mmdas_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('region', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('contact_email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('contact_phone', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('jurisdiction_boundaries', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='mmdas_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('permit_applications',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('permit_applications_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('application_number', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('mmda_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('architect_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('applicant_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('permit_type_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('zoning_district_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('zoning_use_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('drainage_type_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('DRAFT', 'SUBMITTED', 'UNDER_REVIEW', 'ADDITIONAL_INFO_REQUESTED', 'APPROVED', 'REJECTED', 'INSPECTION_PENDING', 'INSPECTION_COMPLETED', 'FOR_APPROVAL_OR_REJECTION', 'ISSUED', 'COMPLETED', 'CANCELLED', name='applicationstatus'), autoincrement=False, nullable=False),
    sa.Column('project_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('project_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('parking_spaces', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('setbacks', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('floor_areas', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('previous_land_use_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('project_address', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('parcel_number', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('estimated_cost', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('construction_area', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('expected_start_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('expected_end_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('submitted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('approved_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('latitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True, comment='Decimal degrees (WGS84)'),
    sa.Column('longitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True, comment='Decimal degrees (WGS84)'),
    sa.Column('parcel_geometry', sa.NullType(), autoincrement=False, nullable=True, comment='Property boundary in GeoJSON format'),
    sa.Column('spatial_data', sa.NullType(), autoincrement=False, nullable=True, comment='Zoning district polygon snapshot at the time of application'),
    sa.Column('project_location', sa.NullType(), autoincrement=False, nullable=True, comment='Specific project coordinates'),
    sa.Column('gis_metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='Additional spatial attributes like elevation, zoning codes, etc.'),
    sa.ForeignKeyConstraint(['applicant_id'], ['users.id'], name='permit_applications_applicant_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['architect_id'], ['professionals.id'], name='permit_applications_architect_id_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['drainage_type_id'], ['drainage_types.id'], name='permit_applications_drainage_type_id_fkey'),
    sa.ForeignKeyConstraint(['mmda_id'], ['mmdas.id'], name='permit_applications_mmda_id_fkey'),
    sa.ForeignKeyConstraint(['permit_type_id'], ['permit_types.id'], name='permit_applications_permit_type_id_fkey'),
    sa.ForeignKeyConstraint(['previous_land_use_id'], ['previous_land_uses.id'], name='permit_applications_previous_land_use_id_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['zoning_district_id'], ['zoning_districts.id'], name='permit_applications_zoning_district_id_fkey'),
    sa.ForeignKeyConstraint(['zoning_use_id'], ['zoning_permitted_uses.id'], name='permit_applications_zoning_use_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='permit_applications_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_permit_applications_status', 'permit_applications', ['status'], unique=False)
    op.create_index('ix_permit_applications_project_location', 'permit_applications', ['project_location'], unique=False)
    op.create_index('ix_permit_applications_created', 'permit_applications', ['created_at'], unique=False)
    op.create_index('ix_permit_applications_application_number', 'permit_applications', ['application_number'], unique=True)
    op.create_index('ix_permit_applications_applicant', 'permit_applications', ['applicant_id'], unique=False)
    op.create_index('idx_permit_applications_spatial_data', 'permit_applications', ['spatial_data'], unique=False, postgresql_using='gist')
    op.create_index('idx_permit_applications_project_location', 'permit_applications', ['project_location'], unique=False, postgresql_using='gist')
    op.create_index('idx_permit_applications_parcel_geometry', 'permit_applications', ['parcel_geometry'], unique=False, postgresql_using='gist')
    op.create_table('drainage_types',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('drainage_types_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='drainage_types_pkey'),
    sa.UniqueConstraint('name', name='drainage_types_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('site_conditions',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('site_conditions_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='site_conditions_pkey'),
    sa.UniqueConstraint('name', name='site_conditions_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('user_profiles',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('ghana_card_number', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('digital_address', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('specialization', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('work_email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('staff_number', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='Unique MMDA-issued staff or payroll number'),
    sa.Column('designation', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_profiles_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='user_profiles_pkey'),
    sa.UniqueConstraint('ghana_card_number', name='user_profiles_ghana_card_number_key'),
    sa.UniqueConstraint('staff_number', name='user_profiles_staff_number_key'),
    sa.UniqueConstraint('work_email', name='user_profiles_work_email_key')
    )
    op.create_table('applicant_types',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('applicant_types_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('code', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='applicant_types_pkey'),
    sa.UniqueConstraint('code', name='applicant_types_code_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('professionals',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('professionals_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('full_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('phone', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('firm_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('role', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('license_number', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='professionals_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('departments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('mmda_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('code', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['mmda_id'], ['mmdas.id'], name='departments_mmda_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='departments_pkey'),
    sa.UniqueConstraint('mmda_id', 'code', name='uq_department_code_per_mmda')
    )
    op.create_table('zoning_districts',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('zoning_districts_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('code', postgresql.ENUM('RURAL_A', 'RURAL_B', 'RESIDENTIAL_A', 'RESIDENTIAL_B', 'RESIDENTIAL_C', 'RESIDENTIAL_D', 'RESIDENTIAL_E', 'REDEVELOPMENT_ZONE', 'EDUCATION_PRIMARY', 'EDUCATION_SECONDARY', 'EDUCATION_TERTIARY', 'HEALTH_CLINIC', 'HEALTH_POST', 'HEALTH_CENTER', 'HEALTH_POLYCLINIC', 'HEALTH_DISTRICT_HOSPITAL', 'HEALTH_REGIONAL_HOSPITAL', 'CENTRAL_BUSINESS_DISTRICT', 'SUB_REGIONAL_BUSINESS', 'MIXED_BUSINESS', 'INFORMAL_BUSINESS', 'GOVERNMENT_BUSINESS', 'LIGHT_INDUSTRIAL', 'SERVICE_INDUSTRY', 'GENERAL_INDUSTRIAL', 'NOXIOUS_INDUSTRIAL', 'EXTRACTIVE_INDUSTRIAL', 'PLACES_OF_WORSHIP', 'RECREATION_SPORTS', 'PUBLIC_OPEN_SPACE', 'PROTECTED_COASTAL', 'CONSERVATION_AREA', 'TRANSPORT_WAREHOUSING', 'TOURIST_ZONE', 'SPECIAL_EMERGENCY', 'SPECIAL_UTILITY', 'SPECIAL_SECURITY', 'HERBAL_MEDICINE', 'FOREST_RESERVE', 'COMMERCIAL_TIMBER', name='zonetype'), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('max_height', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('max_coverage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('min_plot_size', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('color_code', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('density', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('parking_requirement', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('setbacks', sa.VARCHAR(length=150), autoincrement=False, nullable=True),
    sa.Column('special_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('spatial_data', sa.NullType(), autoincrement=False, nullable=True),
    sa.Column('population_served', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('buffer_zones', sa.VARCHAR(length=150), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='zoning_districts_pkey'),
    sa.UniqueConstraint('code', name='zoning_districts_code_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_zoning_districts_spatial_data', 'zoning_districts', ['spatial_data'], unique=False, postgresql_using='gist')
    op.create_table('payments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('application_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('amount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('PENDING', 'COMPLETED', 'FAILED', 'REFUNDED', name='paymentstatus'), autoincrement=False, nullable=True),
    sa.Column('method', postgresql.ENUM('CASH', 'BANK_TRANSFER', 'MOBILE_MONEY', 'CREDIT_CARD', name='paymentmethod'), autoincrement=False, nullable=True),
    sa.Column('purpose', postgresql.ENUM('APPLICATION_FEE', 'PROCESSING_FEE', 'REVIEW_FEE', 'INSPECTION_FEE', 'PERMIT_ISSUANCE', 'PENALTY_FEE', 'OTHER', name='paymentpurpose'), autoincrement=False, nullable=False),
    sa.Column('transaction_reference', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('receipt_number', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('payment_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('due_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['application_id'], ['permit_applications.id'], name='payments_application_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='payments_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='payments_pkey'),
    sa.UniqueConstraint('receipt_number', name='payments_receipt_number_key'),
    sa.UniqueConstraint('transaction_reference', name='payments_transaction_reference_key')
    )
    op.create_table('inspections',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('application_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('inspection_officer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('inspection_type', postgresql.ENUM('SITE', 'FOUNDATION', 'FRAMING', 'ELECTRICAL', 'PLUMBING', 'FINAL', 'SPECIAL', name='inspectiontype'), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('PENDING', 'SCHEDULED', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED', name='inspectionstatus'), autoincrement=False, nullable=True),
    sa.Column('outcome', postgresql.ENUM('PASSED', 'FAILED', 'PARTIAL', name='inspectionoutcome'), autoincrement=False, nullable=True),
    sa.Column('scheduled_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('actual_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('findings', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('recommendations', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('violations_found', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_reinspection', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('assigned_officer_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['application_id'], ['permit_applications.id'], name='inspections_application_id_fkey'),
    sa.ForeignKeyConstraint(['assigned_officer_id'], ['users.id'], name='inspections_assigned_officer_id_fkey'),
    sa.ForeignKeyConstraint(['inspection_officer_id'], ['users.id'], name='inspections_inspection_officer_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='inspections_pkey')
    )
    op.create_table('document_types',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('document_types_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('code', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('is_custom', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='document_types_pkey'),
    sa.UniqueConstraint('code', name='document_types_code_key'),
    sa.UniqueConstraint('name', name='document_types_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('first_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('last_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('other_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('phone', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('alt_phone', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('applicant_type_code', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('preferred_verification', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('role', postgresql.ENUM('APPLICANT', 'REVIEW_OFFICER', 'INSPECTION_OFFICER', 'ADMIN', name='userrole'), autoincrement=False, nullable=False),
    sa.Column('verification_stage', postgresql.ENUM('OTP_PENDING', 'OTP_VERIFIED', 'DOCUMENT_PENDING', 'FULLY_VERIFIED', name='verificationstage'), autoincrement=False, nullable=True),
    sa.Column('date_of_birth', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('gender', sa.VARCHAR(length=1), autoincrement=False, nullable=True),
    sa.Column('address', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['applicant_type_code'], ['applicant_types.code'], name='users_applicant_type_code_fkey'),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('alt_phone', name='users_alt_phone_key'),
    sa.UniqueConstraint('email', name='users_email_key'),
    sa.UniqueConstraint('phone', name='users_phone_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('zoning_prohibited_uses',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('zoning_district_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('use', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['zoning_district_id'], ['zoning_districts.id'], name='zoning_prohibited_uses_zoning_district_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='zoning_prohibited_uses_pkey')
    )
    op.create_table('notifications',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('recipient_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('sender_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('notification_type', postgresql.ENUM('APPLICATION_SUBMITTED', 'REVIEW_REQUESTED', 'ADDITIONAL_INFO_REQUESTED', 'APPLICATION_APPROVED', 'APPLICATION_REJECTED', 'INSPECTION_SCHEDULED', 'INSPECTION_RESULT', 'PAYMENT_RECEIVED', 'SYSTEM_ALERT', name='notificationtype'), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('is_read', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('read_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('related_application_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('notification_metadata', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['recipient_id'], ['users.id'], name='notifications_recipient_id_fkey'),
    sa.ForeignKeyConstraint(['related_application_id'], ['permit_applications.id'], name='notifications_related_application_id_fkey'),
    sa.ForeignKeyConstraint(['sender_id'], ['users.id'], name='notifications_sender_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='notifications_pkey')
    )
    op.create_table('committees',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('committees_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('mmda_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['mmda_id'], ['mmdas.id'], name='committees_mmda_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='committees_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('application_documents',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('application_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('document_type_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('file_path', sa.VARCHAR(length=512), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('PENDING', 'APPROVED', 'REJECTED', 'REVISION_REQUESTED', name='documentstatus'), autoincrement=False, nullable=True),
    sa.Column('uploaded_by_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('uploaded_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('reviewed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['application_id'], ['permit_applications.id'], name='application_documents_application_id_fkey'),
    sa.ForeignKeyConstraint(['document_type_id'], ['document_types.id'], name='application_documents_document_type_id_fkey'),
    sa.ForeignKeyConstraint(['uploaded_by_id'], ['users.id'], name='application_documents_uploaded_by_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='application_documents_pkey')
    )
    op.create_table('spatial_ref_sys',
    sa.Column('srid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('auth_name', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.Column('auth_srid', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('srtext', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    sa.Column('proj4text', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    sa.CheckConstraint('srid > 0 AND srid <= 998999', name='spatial_ref_sys_srid_check'),
    sa.PrimaryKeyConstraint('srid', name='spatial_ref_sys_pkey')
    )
    op.create_table('application_reviews',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('application_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('review_officer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('PENDING', 'IN_PROGRESS', 'COMPLETED', name='reviewstatus'), autoincrement=False, nullable=True),
    sa.Column('outcome', postgresql.ENUM('APPROVED', 'REJECTED', 'NEEDS_MORE_INFO', name='reviewoutcome'), autoincrement=False, nullable=True),
    sa.Column('comments', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('requested_additional_info', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('deadline', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['application_id'], ['permit_applications.id'], name='application_reviews_application_id_fkey'),
    sa.ForeignKeyConstraint(['review_officer_id'], ['users.id'], name='application_reviews_review_officer_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='application_reviews_pkey')
    )
    op.create_table('committee_reviews',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('committee_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('application_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('PENDING', 'IN_PROGRESS', 'COMPLETED', name='reviewstatus'), autoincrement=False, nullable=True),
    sa.Column('comments', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('decision_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['application_id'], ['permit_applications.id'], name='committee_reviews_application_id_fkey'),
    sa.ForeignKeyConstraint(['committee_id'], ['committees.id'], name='committee_reviews_committee_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='committee_reviews_pkey')
    )
    op.create_table('fee_structures',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('purpose', postgresql.ENUM('APPLICATION_FEE', 'PROCESSING_FEE', 'REVIEW_FEE', 'INSPECTION_FEE', 'PERMIT_ISSUANCE', 'PENALTY_FEE', 'OTHER', name='paymentpurpose'), autoincrement=False, nullable=False),
    sa.Column('amount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='fee_structures_pkey'),
    sa.UniqueConstraint('purpose', name='fee_structures_purpose_key')
    )
    op.create_table('application_site_conditions',
    sa.Column('application_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('condition_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['application_id'], ['permit_applications.id'], name='application_site_conditions_application_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['condition_id'], ['site_conditions.id'], name='application_site_conditions_condition_id_fkey', ondelete='CASCADE')
    )
    op.create_table('unverified_users',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('phone', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('otp_secret', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('otp_expires', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('verification_channel', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('verification_attempts', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_locked', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('lock_expires', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='unverified_users_pkey'),
    sa.UniqueConstraint('email', name='unverified_users_email_key'),
    sa.UniqueConstraint('phone', name='unverified_users_phone_key')
    )
    op.create_table('previous_land_uses',
    sa.Column('id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='previous_land_uses_pkey'),
    sa.UniqueConstraint('name', name='previous_land_uses_name_key')
    )
    op.create_table('committee_members',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('committee_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('role', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['committee_id'], ['committees.id'], name='committee_members_committee_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='committee_members_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='committee_members_pkey')
    )
    op.create_table('zoning_use_document_requirements',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('zoning_use_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('document_type_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_mandatory', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('phase', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('notes', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['document_type_id'], ['document_types.id'], name='zoning_use_document_requirements_document_type_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['zoning_use_id'], ['zoning_permitted_uses.id'], name='zoning_use_document_requirements_zoning_use_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='zoning_use_document_requirements_pkey')
    )
    op.create_table('permit_types',
    sa.Column('id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('base_fee', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('standard_duration_days', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='permit_types_pkey')
    )
    # ### end Alembic commands ###
