"""add_code_to_document_types

Revision ID: 728b6503d4fe
Revises: 
Create Date: 2025-06-22 04:00:50.763185

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '728b6503d4fe'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('notifications')
    op.drop_table('application_reviews')
    op.drop_table('fee_structures')
    op.drop_table('inspections')
    op.drop_table('payments')
    op.drop_constraint('user_profiles_user_id_fkey', 'user_profiles', type_='foreignkey')
    op.drop_constraint('user_documents_user_id_fkey', 'user_documents', type_='foreignkey')
    op.drop_constraint('permit_applications_applicant_id_fkey', 'permit_applications', type_='foreignkey')
    op.drop_table('users')
    op.drop_constraint(
        'document_requirements_document_type_id_fkey', 
        'document_requirements', 
        type_='foreignkey'
    )
    op.drop_constraint(
        'permit_document_requirements_document_type_id_fkey', 
        'permit_document_requirements', 
        type_='foreignkey'
    )
    op.drop_table('document_types')
    op.drop_table('application_documents')
    op.drop_table('unverified_users')
    op.drop_table('permit_applications')
    op.drop_table('user_documents')
    op.drop_constraint(
        'document_requirements_permit_type_id_fkey',
        'document_requirements',
        type_='foreignkey'
    )
    op.drop_constraint(
        'permit_document_requirements_permit_type_id_fkey',
        'permit_document_requirements', 
        type_='foreignkey'
    )
    op.drop_table('permit_types')
    op.drop_table('permit_document_requirements')
    op.drop_table('document_requirements')
    op.drop_table('user_profiles')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user_profiles',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('ghana_card_number', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('date_of_birth', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('gender', sa.VARCHAR(length=1), autoincrement=False, nullable=True),
    sa.Column('address', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('digital_address', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('company_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('license_number', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('specialization', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_profiles_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='user_profiles_pkey'),
    sa.UniqueConstraint('ghana_card_number', name='user_profiles_ghana_card_number_key')
    )
    op.create_table('document_requirements',
    sa.Column('permit_type_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('document_type_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('is_mandatory', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('notes', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['document_type_id'], ['document_types.id'], name='document_requirements_document_type_id_fkey'),
    sa.ForeignKeyConstraint(['permit_type_id'], ['permit_types.id'], name='document_requirements_permit_type_id_fkey'),
    sa.PrimaryKeyConstraint('permit_type_id', 'document_type_id', name='document_requirements_pkey')
    )
    op.create_table('permit_document_requirements',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('permit_type_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('document_type_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_mandatory', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('conditional_logic', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('notes', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('phase', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['document_type_id'], ['document_types.id'], name='permit_document_requirements_document_type_id_fkey'),
    sa.ForeignKeyConstraint(['permit_type_id'], ['permit_types.id'], name='permit_document_requirements_permit_type_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='permit_document_requirements_pkey'),
    sa.UniqueConstraint('permit_type_id', 'document_type_id', name='uq_permit_document')
    )
    op.create_table('permit_types',
    sa.Column('id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('requires_epa_approval', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('requires_heritage_review', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='permit_types_pkey')
    )
    op.create_table('user_documents',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('document_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('file_url', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_documents_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='user_documents_pkey')
    )
    op.create_table('permit_applications',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('permit_applications_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('application_number', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('applicant_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('permit_type', postgresql.ENUM('RESIDENTIAL_SINGLE', 'RESIDENTIAL_COMPOUND', 'COMMERCIAL_RETAIL', 'COMMERCIAL_OFFICE', 'INDUSTRIAL_LIGHT', 'INDUSTRIAL_HEAVY', 'INSTITUTIONAL', 'PUBLIC_ASSEMBLY', 'INFRASTRUCTURE', 'TEMPORARY_STRUCTURE', 'HERITAGE_ALTERATION', 'COASTAL_DEVELOPMENT', 'HIGH_RISE', 'MINING_SUPPORT', 'MARKET_STALL', 'AGRIC_STRUCTURE', 'TELECOMM_TOWER', 'BILLBOARD_SIGN', name='permittype'), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('DRAFT', 'SUBMITTED', 'UNDER_REVIEW', 'ADDITIONAL_INFO_REQUESTED', 'APPROVED', 'REJECTED', 'INSPECTION_PENDING', 'COMPLETED', name='applicationstatus'), autoincrement=False, nullable=True),
    sa.Column('project_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('project_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('project_address', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('estimated_cost', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('construction_area', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('expected_start_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('expected_end_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['applicant_id'], ['users.id'], name='permit_applications_applicant_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='permit_applications_pkey'),
    sa.UniqueConstraint('application_number', name='permit_applications_application_number_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('unverified_users',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('phone', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('otp_secret', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('otp_expires', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('verification_channel', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('verification_attempts', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_locked', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('lock_expires', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='unverified_users_pkey'),
    sa.UniqueConstraint('email', name='unverified_users_email_key'),
    sa.UniqueConstraint('phone', name='unverified_users_phone_key')
    )
    op.create_table('application_documents',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('application_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('document_type', postgresql.ENUM('SITE_PLAN', 'BUILDING_PLAN', 'STRUCTURAL_DRAWINGS', 'LAND_TITLE', 'IDENTIFICATION', 'ENGINEER_REPORT', 'OTHER', name='documenttype'), autoincrement=False, nullable=False),
    sa.Column('file_path', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('file_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('file_size', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('PENDING', 'APPROVED', 'REJECTED', name='documentstatus'), autoincrement=False, nullable=True),
    sa.Column('rejection_reason', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['application_id'], ['permit_applications.id'], name='application_documents_application_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='application_documents_pkey')
    )
    op.create_table('document_types',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('is_custom', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='document_types_pkey'),
    sa.UniqueConstraint('name', name='document_types_name_key')
    )
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('first_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('last_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('other_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('phone', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('alt_phone', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('preferred_verification', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('role', postgresql.ENUM('APPLICANT', 'REVIEW_OFFICER', 'INSPECTION_OFFICER', 'ADMIN', name='userrole'), autoincrement=False, nullable=False),
    sa.Column('verification_stage', postgresql.ENUM('OTP_PENDING', 'OTP_VERIFIED', 'DOCUMENT_PENDING', 'FULLY_VERIFIED', name='verificationstage'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('alt_phone', name='users_alt_phone_key'),
    sa.UniqueConstraint('email', name='users_email_key'),
    sa.UniqueConstraint('phone', name='users_phone_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('payments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('application_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('amount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('PENDING', 'COMPLETED', 'FAILED', 'REFUNDED', name='paymentstatus'), autoincrement=False, nullable=True),
    sa.Column('method', postgresql.ENUM('CASH', 'BANK_TRANSFER', 'MOBILE_MONEY', 'CREDIT_CARD', name='paymentmethod'), autoincrement=False, nullable=True),
    sa.Column('purpose', postgresql.ENUM('APPLICATION_FEE', 'PROCESSING_FEE', 'REVIEW_FEE', 'INSPECTION_FEE', 'PERMIT_ISSUANCE', 'PENALTY_FEE', 'OTHER', name='paymentpurpose'), autoincrement=False, nullable=False),
    sa.Column('transaction_reference', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('receipt_number', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('payment_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('due_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['application_id'], ['permit_applications.id'], name='payments_application_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='payments_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='payments_pkey'),
    sa.UniqueConstraint('receipt_number', name='payments_receipt_number_key'),
    sa.UniqueConstraint('transaction_reference', name='payments_transaction_reference_key')
    )
    op.create_table('inspections',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('application_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('inspection_officer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('inspection_type', postgresql.ENUM('SITE', 'FOUNDATION', 'FRAMING', 'ELECTRICAL', 'PLUMBING', 'FINAL', 'SPECIAL', name='inspectiontype'), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('PENDING', 'SCHEDULED', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED', name='inspectionstatus'), autoincrement=False, nullable=True),
    sa.Column('outcome', postgresql.ENUM('PASSED', 'FAILED', 'PARTIAL', name='inspectionoutcome'), autoincrement=False, nullable=True),
    sa.Column('scheduled_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('actual_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('findings', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('recommendations', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('violations_found', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_reinspection', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('assigned_officer_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['application_id'], ['permit_applications.id'], name='inspections_application_id_fkey'),
    sa.ForeignKeyConstraint(['assigned_officer_id'], ['users.id'], name='inspections_assigned_officer_id_fkey'),
    sa.ForeignKeyConstraint(['inspection_officer_id'], ['users.id'], name='inspections_inspection_officer_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='inspections_pkey')
    )
    op.create_table('fee_structures',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('purpose', postgresql.ENUM('APPLICATION_FEE', 'PROCESSING_FEE', 'REVIEW_FEE', 'INSPECTION_FEE', 'PERMIT_ISSUANCE', 'PENALTY_FEE', 'OTHER', name='paymentpurpose'), autoincrement=False, nullable=False),
    sa.Column('amount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='fee_structures_pkey'),
    sa.UniqueConstraint('purpose', name='fee_structures_purpose_key')
    )
    op.create_table('application_reviews',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('application_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('review_officer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('PENDING', 'IN_PROGRESS', 'COMPLETED', name='reviewstatus'), autoincrement=False, nullable=True),
    sa.Column('outcome', postgresql.ENUM('APPROVED', 'REJECTED', 'NEEDS_MORE_INFO', name='reviewoutcome'), autoincrement=False, nullable=True),
    sa.Column('comments', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('requested_additional_info', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('deadline', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['application_id'], ['permit_applications.id'], name='application_reviews_application_id_fkey'),
    sa.ForeignKeyConstraint(['review_officer_id'], ['users.id'], name='application_reviews_review_officer_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='application_reviews_pkey')
    )
    op.create_table('notifications',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('recipient_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('sender_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('notification_type', postgresql.ENUM('APPLICATION_SUBMITTED', 'REVIEW_REQUESTED', 'ADDITIONAL_INFO_REQUESTED', 'APPLICATION_APPROVED', 'APPLICATION_REJECTED', 'INSPECTION_SCHEDULED', 'INSPECTION_RESULT', 'PAYMENT_RECEIVED', 'SYSTEM_ALERT', name='notificationtype'), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('is_read', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('read_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('related_application_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('notification_metadata', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['recipient_id'], ['users.id'], name='notifications_recipient_id_fkey'),
    sa.ForeignKeyConstraint(['related_application_id'], ['permit_applications.id'], name='notifications_related_application_id_fkey'),
    sa.ForeignKeyConstraint(['sender_id'], ['users.id'], name='notifications_sender_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='notifications_pkey')
    )
    # ### end Alembic commands ###
